generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PARTICIPANT
}

enum Status {
  LOCKED
  OPEN
}

model User {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  profile_photo   String?
  phone_no        String             @unique
  otp             OTP?
  verified        Boolean            @default(false)
  conversations   UserConversation[]
  recieverMessage Message[]          @relation("recieverMessage")
  senderMessage   Message[]          @relation("senderMessage")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
}

model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  otp       String
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  recieverId     String?      @db.ObjectId
  senderId       String?      @db.ObjectId
  conversationId String       @db.ObjectId
  message        String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User?        @relation("senderMessage", fields: [senderId], references: [id], onDelete: Cascade)
  reciever       User?        @relation("recieverMessage", fields: [recieverId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Conversation {
  id          String             @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?
  image       String?
  status      Status?            @default(OPEN)
  users       UserConversation[]
  messages    Message[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model UserConversation {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  conversationId String       @db.ObjectId
  role           Role?        @default(PARTICIPANT)
  users          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
